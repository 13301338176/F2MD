#include "MDModule.h"

#define ART_RANGE 420 // 415
#define INT_DISTANCE 3 // 3.292091

#define SAW_DISTANCE 210 // 420/2

#define MGT_DISTANCE 45 // 42.77
#define MAX_SPEED 45 // 42.77

#define MAP_SPEED 4.6 // 4.50002

#define MBF_TIME 0.99 //0.99998

#include <stdio.h>
#include <stdlib.h>     /* atof */
#include <boost/algorithm/string.hpp>
#include <iostream>
#include <string>
#include <vector>

using namespace std;
using namespace boost;

MDModule::MDModule(int myId, Coord myPosition) {
    this->myId = myId;
    this->myPosition = myPosition;
}

double MDModule::calculateDistance(Coord pos1, Coord pos2) {
    return sqrt(
            pow(pos1.x - pos2.x, 2.0) + pow(pos1.y - pos2.y, 2.0)
                    + pow(pos1.z - pos2.z, 2.0));
}

double MDModule::ARTcheck(Coord senderPosition, Coord receiverPosition) {
    double distance = calculateDistance(senderPosition, receiverPosition);

    if (distance < ART_RANGE) {
        return 0;
    } else {
        return distance;
    }
}

double MDModule::MGTDistance(Coord curPosition, Coord oldPosition,
        double time) {
    double distance = calculateDistance(curPosition, oldPosition);

    if (distance < MGT_DISTANCE * time) {
        return 0;
    } else {
        return distance;
    }
}

double MDModule::MGTSpeed(double curSpeed, double oldspeed, double time) {
    double speedDelta = abs(curSpeed - oldspeed);

    if (speedDelta < MAP_SPEED * time) {
        return 0;
    } else {
        return speedDelta;
    }
}

double MDModule::MAXSpeed(double speed) {
    if (abs(speed) < MAX_SPEED) {
        return 0;
    } else {
        return abs(speed);
    }
}

double MDModule::INTCheck(Coord nodePosition1, Coord nodePosition2) {
    double distance = calculateDistance(nodePosition1, nodePosition2);
    if (distance < INT_DISTANCE) {
        return distance;
    } else {
        return 0;
    }
}

double MDModule::SAWCheck(Coord senderPosition, Coord receiverPosition) {
    double distance = calculateDistance(senderPosition, receiverPosition);
    if (distance < SAW_DISTANCE) {
        return distance;
    } else {
        return 0;
    }
}

double MDModule::MAPCheck(Coord senderPosition) {
    double Intersection = 0;
    ObstacleControl* obstacles = ObstacleControlAccess().getIfExists();
    for (double var = 0.5; var < 2.5; var = var + 0.5) {
        Intersection = Intersection
                + obstacles->calculateInsersion(senderPosition, var, var);
    }
    if (Intersection > 0) {
        return Intersection;
    } else {
        return 0;
    }
}


double MDModule::MBFCheck(double timeNew, double timeOld) {
    double timeDelta = timeNew - timeOld;
    if (timeDelta < MBF_TIME) {
        return 1;
    } else {
        return 0;
    }
}

std::map<std::string, double> MDModule::CheckBSM(NodeTable detectedNodes, int senderId) {

    std::map<std::string, double> result;

    NodeHistory senderNode = detectedNodes.get(senderId);

    result["ARTcheck"] = ARTcheck(myPosition,
            senderNode.getLatestBSM().getSenderPos());
    result["MAXSpeed"] = MAXSpeed(senderNode.getSenderSpeed(0));

    if (detectedNodes.get(senderId).getBSMNum() > 1) {
        result["MGTDistance"] = MGTDistance(senderNode.getSenderPos(0),
                senderNode.getSenderPos(1),
                senderNode.getDeltaTime(0, 1));

        result["MGTSpeed"] = MGTSpeed(senderNode.getSenderSpeed(0),
                senderNode.getSenderSpeed(1), senderNode.getDeltaTime(0, 1));

        result["MBFCheck"] = MBFCheck(senderNode.getArrivalTime(0),
                senderNode.getArrivalTime(1));

    } else {
        // result["SAWCheck"] = SAWCheck(myPosition, senderNode.getLatestBSM().getSenderPos());
    }

    result["MAPCheck"] = MAPCheck(senderNode.getSenderPos(0));

    result["INTId_0"] = myId;
    result["INTCheck_0"] = INTCheck(myPosition, senderNode.getSenderPos(0));

    NodeHistory varNode;
    int INTScore = 0;
    int INTNum = 1;

    char num_string[32];
    char INTId_string[64] = "INTId_";
    char INTCheck_string[64] = "INTCheck_";

    for (int var = 0; var < detectedNodes.getNodesNum(); ++var) {
        if (detectedNodes.getNodeId(var) != senderId) {
            if (detectedNodes.getDeltaTime(detectedNodes.getNodeId(var),
                    senderId) < 0.3) {
                varNode = detectedNodes.get(detectedNodes.getNodeId(var));
                INTScore = INTCheck(varNode.getSenderPos(0),
                        senderNode.getSenderPos(0));
                if (INTScore < 1) {

                    sprintf(num_string, "%d", INTNum);
                    strcat(INTId_string, num_string);
                    strcat(INTCheck_string, num_string);
                    result[INTId_string] = detectedNodes.getNodeId(var);
                    result[INTCheck_string] = INTScore;

                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));
                    strncpy(INTCheck_string, "INTCheck_",
                            sizeof(INTCheck_string));

                    INTNum++;
                }
            }
        }
    }

    result["INTNum"] = INTNum;


    return result;
}

void MDModule::resultToMDMHistory(std::map<std::string, double> result, int senderId){

    MDMHistory history = MDMHistory

    int INTindex = 0;
    char INTId_string[64] = "INTId_";

    AllTests++;

    bool checkFailed = false;

    for (std::map<std::string, double>::iterator it = result.begin();
            it != result.end(); ++it) {

        if (it->first.compare(0, 6, "INTId_") != 0
                && it->first.compare(0, 9, "INTCheck_") != 0
                && it->first.compare(0, 6, "INTNum") != 0) {
            if (it->second > 0) {
                checkFailed = true;
                std::cout
                        << "########## "
                        << it->first << " => " << it->second << " A:" << myId
                        << " B:" << senderId <<'\n';
            }
        } else {
            if (it->first.compare(0, 9, "INTCheck_") == 0) {
                if (it->second > 0) {
                    vector<string> fields;
                    split(fields, it->first, is_any_of("_"));

                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));

                    strcat(INTId_string, fields[1].data());
                    checkFailed = true;
                    std::cout<< "########## "
                            << "INTCheck " << " => " << it->second << " A:"
                            << myId << " B:" << senderId << " C:"
                            << result[INTId_string] <<'\n';
                }
            }
        }
    }


}

static double flags = 0;
static double AllTests = 0;

void MDModule::reportMB(std::map<std::string, double> result, int senderId){

    int INTindex = 0;
    char INTId_string[64] = "INTId_";

    AllTests++;

    bool checkFailed = false;

    for (std::map<std::string, double>::iterator it = result.begin();
            it != result.end(); ++it) {

        if (it->first.compare(0, 6, "INTId_") != 0
                && it->first.compare(0, 9, "INTCheck_") != 0
                && it->first.compare(0, 6, "INTNum") != 0) {
            if (it->second > 0) {
                checkFailed = true;
                std::cout
                        << "########## "
                        << it->first << " => " << it->second << " A:" << myId
                        << " B:" << senderId <<'\n';
            }
        } else {
            if (it->first.compare(0, 9, "INTCheck_") == 0) {
                if (it->second > 0) {
                    vector<string> fields;
                    split(fields, it->first, is_any_of("_"));

                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));

                    strcat(INTId_string, fields[1].data());
                    checkFailed = true;
                    std::cout<< "########## "
                            << "INTCheck " << " => " << it->second << " A:"
                            << myId << " B:" << senderId << " C:"
                            << result[INTId_string] <<'\n';
                }
            }
        }
    }

    if(checkFailed){
        flags++;
    }

//    std::cout
//            << "++++++++++ "
//            << " Factor:"<< flags/AllTests*100 << "%"<< '\n';

}






