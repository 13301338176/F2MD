#include "MDModuleV2.h"

#define ART_RANGE 416 // 415
#define INT_DISTANCE 3.1 // 3.292091

#define SAW_DISTANCE 210 // 420/2

#define MGT_DISTANCE 43 // 42.77
#define MAX_SPEED 43 // 42.77

#define MAP_SPEED 4.51 // 4.50002

#define MBF_TIME 0.99 //0.99998

#include <stdio.h>
#include <stdlib.h>     /* atof */
#include <boost/algorithm/string.hpp>
#include <iostream>
#include <string>
#include <vector>

using namespace std;
using namespace boost;

MDModuleV2::MDModuleV2(int myId, Coord myPosition, Coord myPositionConfidence) {
    this->myId = myId;
    this->myPosition = myPosition;
    this->myPositionConfidence = myPositionConfidence;
}

double MDModuleV2::calculateDistance(Coord pos1, Coord pos2) {
    return sqrt(
            pow(pos1.x - pos2.x, 2.0) + pow(pos1.y - pos2.y, 2.0)
                    + pow(pos1.z - pos2.z, 2.0));
}

double MDModuleV2::calculateSpeed(Coord Speed) {
    return sqrt(pow(Speed.x, 2.0) + pow(Speed.y, 2.0) + pow(Speed.z, 2.0));
}

double MDModuleV2::calculateDeltaTime(BasicSafetyMessage bsm1,
        BasicSafetyMessage bsm2) {
    return abs(bsm1.getArrivalTime().dbl() - bsm2.getArrivalTime().dbl());
}

double MDModuleV2::calculateCircleSegment(double radius, double intDistance) {
    double area = 0;

    if (radius > intDistance) {
        area = radius * radius * acos((radius - intDistance) / radius)
                - (radius - intDistance)
                        * sqrt(
                                2 * radius * intDistance
                                        - intDistance * intDistance);
    } else {
        double intDistanceTemp = 2 * radius - intDistance;
        area = radius * radius * acos((radius - intDistanceTemp) / radius)
                - (radius - intDistanceTemp)
                        * sqrt(
                                2 * radius * intDistanceTemp
                                        - intDistanceTemp * intDistanceTemp);
        area = PI * radius * radius - area;
    }

    return area;
}

double MDModuleV2::calculateCircleCircleIntersection(double r0, double r1,
        double d) {

    double rr0 = r0 * r0;
    double rr1 = r1 * r1;

    // Circles do not overlap
    if (d > r1 + r0) {
        return 0;
    }
    // Circle1 is completely inside circle0
    else if (d <= abs(r0 - r1) && r0 >= r1) {
        // Return area of circle1
        return PI * rr1;
    }

// Circle0 is completely inside circle1
    else if (d <= abs(r0 - r1) && r0 < r1) {
        // Return area of circle0
        return PI * rr0;
    }

// Circles partially overlap
    else {
        double phi = (acos((rr0 + (d * d) - rr1) / (2 * r0 * d))) * 2;
        double theta = (acos((rr1 + (d * d) - rr0) / (2 * r1 * d))) * 2;
        double area1 = 0.5 * theta * rr1 - 0.5 * rr1 * sin(theta);
        double area2 = 0.5 * phi * rr0 - 0.5 * rr0 * sin(phi);

// Return area of intersection
        return area1 + area2;
    }
}

double MDModuleV2::CircleCircleFactor(double d, double r1, double r2,
        double range) {

    double d1 = (r1 * r1 + d * d - r2 * r2) / (2 * d);
    double d2 = (r2 * r2 + d * d - r1 * r1) / (2 * d);

    double area1 = calculateCircleCircleIntersection(r1, range / 2, d1);

    double area2 = calculateCircleCircleIntersection(r2, range / 2, d2);

    double factor = (area1 + area2) / (PI * r1 * r1 + PI * r2 * r2);

    return factor;
}

double MDModuleV2::SegmentSegmentFactor(double d, double r1, double r2,
        double range) {

    double d1 = (r1 * r1 + d * d - r2 * r2) / (2 * d);
    double d2 = (r2 * r2 + d * d - r1 * r1) / (2 * d);

    double overlap1 = 0;
    double overlap2 = 0;

    double addon = 0;

    if ((d1 - range / 2) < r1) {
        if ((d1 - range / 2) > -r1) {
            addon = -(d1 - r1);
            if (addon < range / 2) {
                overlap1 = range / 2 + addon;
            } else {
                overlap1 = range;
            }
        } else {
            overlap1 = 2 * r1;
        }
    }

    if ((d2 - range / 2) < r2) {
        if ((d2 - range / 2) > -r2) {
            addon = -(d2 - r2);
            if (addon < range / 2) {
                overlap2 = range / 2 + addon;
            } else {
                overlap2 = range;
            }
        } else {
            overlap2 = 2 * r2;
        }
    }

    double factor = (overlap1 + overlap2) / (2 * r1 + 2 * r2);

//    std::cout << "##########V2 " << " factor:" << factor << " overlap1:"
//            << overlap1 << " overlap2:" << overlap2 << " range:" << range << " total:"
//            << 2 * r1 + 2 * r2 << '\n';

    return factor;
}

double MDModuleV2::CircleSegmentFactor(double d, double r1, double r2,
        double range) {

    if (range > d + r1 + r2) {
        return 1;
    } else {
        if (range < d - r1 - r2) {
            return 0;
        } else {

            double d1 = (r1 * r1 + d * d - r2 * r2) / (2 * d);
            double d2 = (r2 * r2 + d * d - r1 * r1) / (2 * d);

            double intD1 = (range / 2) - (d1 - r1);
            double intD2 = (range / 2) - (d2 - r2);

            double area1 = calculateCircleSegment(r1, intD1);
            double area2 = calculateCircleSegment(r2, intD2);

            double area12 = 0;
            double area22 = 0;

            if (d2 + (range / 2) < r2) {
                double intD22 = r2 - (d2 + (range / 2));
                area22 = calculateCircleSegment(r2, intD22);
            }

            if (d1 + (range / 2) < r1) {
                double intD12 = r1 - (d1 + (range / 2));
                area12 = calculateCircleSegment(r1, intD12);
            }

            double factor = (area1 - area12 + area2 - area22)
                    / (PI * r1 * r1 + PI * r2 * r2);

            return factor;

        }
    }
}

double MDModuleV2::ARTcheck(Coord senderPosition,
        Coord senderPositionConfidence, Coord receiverPosition,
        Coord receiverPositionConfidence) {
    double distance = calculateDistance(senderPosition, receiverPosition);
    double senderR = senderPositionConfidence.x;
    double receiverR = receiverPositionConfidence.x;
    double factor = CircleCircleFactor(distance, senderR, receiverR,
    ART_RANGE);
    return factor;
}

double MDModuleV2::MGTDistance(Coord curPosition, Coord curPositionConfidence,
        Coord oldPosition, Coord oldPositionConfidence, double time) {
    double distance = calculateDistance(curPosition, oldPosition);
    double curR = curPositionConfidence.x;
    double oldR = oldPositionConfidence.x;

    double factor = CircleCircleFactor(distance, curR, oldR,
    MGT_DISTANCE * time);
    return factor;
}

double MDModuleV2::MGTSpeed(double curSpeed, double curSpeedConfidence,
        double oldspeed, double oldSpeedConfidence, double time) {
    double speedDelta = abs(curSpeed - oldspeed);

    double factor = SegmentSegmentFactor(speedDelta, curSpeedConfidence,
            oldSpeedConfidence,
            MAP_SPEED * time);

    return factor;
}

double MDModuleV2::MAXSpeed(double speed, double speedConfidence) {
    if ((abs(speed) + abs(speedConfidence) / 2) < MAX_SPEED) {
        return 1;
    } else if ((abs(speed) - abs(speedConfidence) / 2) > MAX_SPEED) {
        return 0;
    } else {
        return (abs(speedConfidence) / 2 + (MAX_SPEED - abs(speed)))
                / abs(speedConfidence);
    }
}

double MDModuleV2::INTCheck(Coord nodePosition1, Coord nodePosition2) {
    double distance = calculateDistance(nodePosition1, nodePosition2);
    if (distance < INT_DISTANCE) {
        return distance;
    } else {
        return 0;
    }
}

InterTest MDModuleV2::INTCheckFull(NodeTable detectedNodes,
        BasicSafetyMessage bsm) {
    int senderId = bsm.getSenderAddress();
    Coord senderPos = bsm.getSenderPos();

    NodeHistory senderNode = detectedNodes.getNodeHistory(senderId);
    NodeHistory varNode;

    std::map<std::string, double> result;
    int INTScore = 0;
    int INTNum = 0;

    INTScore = INTCheck(myPosition, senderPos);
    if (INTScore < 1) {
        result["INTId_0"] = myId;
        result["INTCheck_0"] = INTScore;
        INTNum++;
    }

    char num_string[32];
    char INTId_string[64] = "INTId_";
    char INTCheck_string[64] = "INTCheck_";

    for (int var = 0; var < detectedNodes.getNodesNum(); ++var) {
        if (detectedNodes.getNodeId(var) != senderId) {
            varNode = detectedNodes.getNodeHistory(
                    detectedNodes.getNodeId(var));

            if (calculateDeltaTime(varNode.getLatestBSM(), bsm) < 0.3) {

                INTScore = INTCheck(varNode.getLatestBSM().getSenderPos(),
                        senderPos);
                if (INTScore < 1) {

                    sprintf(num_string, "%d", INTNum);
                    strcat(INTId_string, num_string);
                    strcat(INTCheck_string, num_string);
                    result[INTId_string] = detectedNodes.getNodeId(var);
                    result[INTCheck_string] = INTScore;

                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));
                    strncpy(INTCheck_string, "INTCheck_",
                            sizeof(INTCheck_string));

                    INTNum++;
                }
            }
        }
    }

    result["INTNum"] = INTNum;

    InterTest intertTest = InterTest(INTNum);

    for (int var = 0; var < INTNum; ++var) {
        sprintf(num_string, "%d", var);
        strcat(INTId_string, num_string);
        strcat(INTCheck_string, num_string);

        intertTest.addInterValue(result.find(INTId_string)->second,
                result.find(INTCheck_string)->second);

        strncpy(INTId_string, "INTId_", sizeof(INTId_string));
        strncpy(INTCheck_string, "INTCheck_", sizeof(INTCheck_string));
    }

    return intertTest;
}

double MDModuleV2::SAWCheck(Coord senderPosition, Coord receiverPosition) {
    double distance = calculateDistance(senderPosition, receiverPosition);
    if (distance < SAW_DISTANCE) {
        return distance;
    } else {
        return 0;
    }
}

double MDModule::MAPCheck(Coord senderPosition,
        Coord senderPositionConfidence) {
    double Intersection = 0;
    ObstacleControl* obstacles = ObstacleControlAccess().getIfExists();
    for (double var = 0.5; var < senderPositionConfidence.x; var = var + 0.5) {
        Intersection = Intersection
                + obstacles->calculateInsersion(senderPosition, var, var);
    }
    if (Intersection > 0) {
        return Intersection;
    } else {
        return 0;
    }
}
//
//double MDModuleV2::MAPCheck(Coord senderPosition,
//        Coord senderPositionConfidence) {
//    ObstacleControl* obstacles = ObstacleControlAccess().getIfExists();
//
//    double resolution = senderPositionConfidence.x/10;
//    if(resolution<1){
//        resolution = 1;
//    }
//    double resolutionDelta = resolution/10;
//
//    double Intersection = 0;
//    Intersection = obstacles->calculateInsersion(senderPosition, resolution/2, resolution/2);
//    int count = 5;
//    for (double r = resolution; r < senderPositionConfidence.x; r=r+resolution) {
//        int resolutionTheta = (int) (2 * PI * r / (resolution));
//        //std::cout << r<< "#" << resolution << "^" << resolutionTheta<<"-";
//        Coord pList[resolutionTheta];
//        for (int t = 0; t < resolutionTheta; ++t) {
//            Coord p(senderPosition.x + r * cos(2 * PI * t / resolutionTheta),
//                    senderPosition.y + r * sin(2 * PI * t / resolutionTheta));
//            pList[t] = p;
//            count++;
//        }
//        Intersection = Intersection + obstacles->calculateInsersionList(senderPosition, r, r,
//                pList, resolutionTheta);
//
//        resolution = resolution + resolutionDelta;
//    }
//    //return Intersection;
//    return (1 - Intersection / count);
//}

double MDModuleV2::MBFCheck(double timeNew, double timeOld) {
    double timeDelta = timeNew - timeOld;
    if (timeDelta < MBF_TIME) {
        return 1;
    } else {
        return 0;
    }
}

BsmCheck MDModuleV2::CheckBSM(BasicSafetyMessage bsm, NodeTable detectedNodes) {

    BsmCheck bsmCheck = BsmCheck();

    int senderId = bsm.getSenderAddress();
    Coord senderPos = bsm.getSenderPos();
    Coord senderPosConfidence = bsm.getSenderPosConfidence();

    NodeHistory senderNode = detectedNodes.getNodeHistory(senderId);

    bsmCheck.setART(
            ARTcheck(myPosition, myPositionConfidence, senderPos,
                    senderPosConfidence));

    bsmCheck.setMAXSpeed(
            MAXSpeed(calculateSpeed(bsm.getSenderSpeed()),
                    calculateSpeed(bsm.getSenderSpeedConfidence())));

    if (detectedNodes.getNodeHistory(senderId).getBSMNum() > 1) {
        bsmCheck.setMGTDistance(
                MGTDistance(senderPos, senderPosConfidence,
                        senderNode.getLatestBSM().getSenderPos(),
                        senderNode.getLatestBSM().getSenderPosConfidence(),
                        calculateDeltaTime(bsm, senderNode.getLatestBSM())));

        bsmCheck.setMGTSpeed(
                MGTSpeed(calculateSpeed(bsm.getSenderSpeed()),
                        calculateSpeed(bsm.getSenderSpeedConfidence()),
                        calculateSpeed(
                                senderNode.getLatestBSM().getSenderSpeed()),
                        calculateSpeed(
                                senderNode.getLatestBSM().getSenderSpeedConfidence()),
                        calculateDeltaTime(bsm, senderNode.getLatestBSM())));

        bsmCheck.setMBF(
                MBFCheck(bsm.getArrivalTime().dbl(),
                        senderNode.getLatestBSM().getArrivalTime().dbl()));

    } else {
        bsmCheck.setSAW(SAWCheck(myPosition, senderPos));
    }

    bsmCheck.setMAP(MAPCheck(senderPos, senderPosConfidence));
    bsmCheck.setMAP(1);
    bsmCheck.setINTER(INTCheckFull(detectedNodes, bsm));

    PrintBsmCheck(senderId, bsmCheck);

    return bsmCheck;
}

void MDModuleV2::PrintBsmCheck(int senderId, BsmCheck bsmCheck) {

    if (bsmCheck.getART() < 0.5) {
        std::cout << "##########V2 " << "ART FAILED => " << bsmCheck.getART()
                << " A:" << myId << " B:" << senderId << '\n';
    }
    if (bsmCheck.getMGTDistance() < 0.5) {
        std::cout << "##########V2 " << "MGTD FAILED => "
                << bsmCheck.getMGTDistance() << " A:" << myId << " B:"
                << senderId << '\n';
    }
    if (bsmCheck.getMGTSpeed() < 0.5) {
        std::cout << "##########V2 " << "MGTS FAILED => "
                << bsmCheck.getMGTSpeed() << " A:" << myId << " B:" << senderId
                << '\n';
    }
    if (bsmCheck.getMAXSpeed() < 0.5) {
        std::cout << "##########V2 " << "MAXS FAILED => "
                << bsmCheck.getMAXSpeed() << " A:" << myId << " B:" << senderId
                << '\n';
    }
    if (bsmCheck.getMAP() < 0.5) {
        std::cout << "##########V2 " << "MAP FAILED => "
                << bsmCheck.getMAP() << " A:" << myId << " B:" << senderId
                << '\n';
    }


}
