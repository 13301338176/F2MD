#include "MDModuleV2.h"

#define ART_RANGE 420 // 415
#define INT_DISTANCE 3 // 3.292091

#define SAW_DISTANCE 210 // 420/2

#define MGT_DISTANCE 45 // 42.77
#define MAX_SPEED 45 // 42.77

#define MAP_SPEED 4.6 // 4.50002

#define MBF_TIME 0.99 //0.99998

#include <stdio.h>
#include <stdlib.h>     /* atof */
#include <boost/algorithm/string.hpp>
#include <iostream>
#include <string>
#include <vector>

using namespace std;
using namespace boost;

MDModuleV2::MDModuleV2(int myId, Coord myPosition, Coord myPositionConfidence) {
    this->myId = myId;
    this->myPosition = myPosition;
    this->myPositionConfidence = myPositionConfidence;
}

double MDModuleV2::calculateDistance(Coord pos1, Coord pos2) {
    return sqrt(
            pow(pos1.x - pos2.x, 2.0) + pow(pos1.y - pos2.y, 2.0)
                    + pow(pos1.z - pos2.z, 2.0));
}

double MDModuleV2::calculateCircleSegment(double radius, double intDistance) {
    double area = 0;

    if (radius > intDistance) {
        area = radius * radius * acos((radius - intDistance) / radius)
                - (radius - intDistance)
                        * sqrt(
                                2 * radius * intDistance
                                        - intDistance * intDistance);
    } else {
        double intDistanceTemp = intDistance - radius;
        area = radius * radius * acos((radius - intDistanceTemp) / radius)
                - (radius - intDistanceTemp)
                        * sqrt(
                                2 * radius * intDistanceTemp
                                        - intDistanceTemp * intDistanceTemp);
        area = area + PI * radius * radius / 2;
    }

    return area;
}

double MDModuleV2::ARTcheck(Coord senderPosition,
        Coord senderPositionConfidence, Coord receiverPosition,
        Coord receiverPositionConfidence) {
    double distance = calculateDistance(senderPosition, receiverPosition);
    double senderR = senderPositionConfidence.x;
    double receiverR = receiverPositionConfidence.x;
    if (ART_RANGE > distance + senderR + receiverR) {
        return 1;
    } else {
        if (ART_RANGE < distance - senderR - receiverR) {
            return 0;
        } else {

            double intDistance = ART_RANGE - (distance - senderR - receiverR);
            double senderIntD = senderR * intDistance / (senderR + receiverR);
            double receiverIntD = receiverR * intDistance
                    / (senderR + receiverR);

            double senderArea = calculateCircleSegment(senderR, senderIntD);
            double receiverArea = calculateCircleSegment(receiverR,
                    receiverIntD);

            double senderArea2 = 0;
            double receiverArea2 = 0;

            if (senderIntD + distance - senderR < receiverR) {
                double receiverIntD2 = receiverR
                        - (senderIntD + distance - senderR);
                receiverArea2 = calculateCircleSegment(receiverR,
                        receiverIntD2);
            }

            if (receiverIntD + distance - receiverR < senderR) {
                double senderIntD2 = senderR
                        - (receiverIntD + distance - receiverR);
                senderArea2 = calculateCircleSegment(senderR, senderIntD2);
            }

            double factor = (senderArea - senderArea2 + receiverArea
                    - receiverArea2)
                    / (PI * senderR * senderR + PI * receiverR * receiverR);
            std::cout << "factor:" << factor << '\n';
            return factor;
        }
    }

}

double MDModuleV2::MGTDistance(Coord curPosition, Coord oldPosition,
        double time) {
    double distance = calculateDistance(curPosition, oldPosition);

    if (distance < MGT_DISTANCE * time) {
        return 0;
    } else {
        return distance;
    }
}

double MDModuleV2::MGTSpeed(double curSpeed, double oldspeed, double time) {
    double speedDelta = abs(curSpeed - oldspeed);

    if (speedDelta < MAP_SPEED * time) {
        return 0;
    } else {
        return speedDelta;
    }
}

double MDModuleV2::MAXSpeed(double speed) {
    if (abs(speed) < MAX_SPEED) {
        return 0;
    } else {
        return abs(speed);
    }
}

double MDModuleV2::INTCheck(Coord nodePosition1, Coord nodePosition2) {
    double distance = calculateDistance(nodePosition1, nodePosition2);
    if (distance < INT_DISTANCE) {
        return distance;
    } else {
        return 0;
    }
}

double MDModuleV2::SAWCheck(Coord senderPosition, Coord receiverPosition) {
    double distance = calculateDistance(senderPosition, receiverPosition);
    if (distance < SAW_DISTANCE) {
        return distance;
    } else {
        return 0;
    }
}

double MDModuleV2::MAPCheck(Coord senderPosition) {
    double Intersection = 0;
    ObstacleControl* obstacles = ObstacleControlAccess().getIfExists();
    for (double var = 0.5; var < 2.5; var = var + 0.5) {
        Intersection = Intersection
                + obstacles->calculateInsersion(senderPosition, var, var);
    }
    if (Intersection > 0) {
        return Intersection;
    } else {
        return 0;
    }
}

double MDModuleV2::MBFCheck(double timeNew, double timeOld) {
    double timeDelta = timeNew - timeOld;
    if (timeDelta < MBF_TIME) {
        return 1;
    } else {
        return 0;
    }
}

std::map<std::string, double> MDModuleV2::CheckBSM(NodeTable detectedNodes,
        int senderId) {

    std::map<std::string, double> result;

    NodeHistory senderNode = detectedNodes.get(senderId);

    result["ARTcheck"] = ARTcheck(myPosition, myPositionConfidence,
            senderNode.getLatestBSM().getSenderPos(),
            senderNode.getLatestBSM().getSenderPosConfidence());
//    result["MAXSpeed"] = MAXSpeed(senderNode.getSenderSpeed(0));

//    if (detectedNodes.get(senderId).getBSMNum() > 1) {
//        result["MGTDistance"] = MGTDistance(senderNode.getSenderPos(0),
//                senderNode.getSenderPos(1), senderNode.getDeltaTime(0, 1));
//
//        result["MGTSpeed"] = MGTSpeed(senderNode.getSenderSpeed(0),
//                senderNode.getSenderSpeed(1), senderNode.getDeltaTime(0, 1));
//
//        result["MBFCheck"] = MBFCheck(senderNode.getArrivalTime(0),
//                senderNode.getArrivalTime(1));
//
//    } else {
//        // result["SAWCheck"] = SAWCheck(myPosition, senderNode.getLatestBSM().getSenderPos());
//    }
//
//    result["MAPCheck"] = MAPCheck(senderNode.getSenderPos(0));
//
//    result["INTId_0"] = myId;
//    result["INTCheck_0"] = INTCheck(myPosition, senderNode.getSenderPos(0));
//
//    NodeHistory varNode;
//    int INTScore = 0;
//    int INTNum = 1;
//
//    char num_string[32];
//    char INTId_string[64] = "INTId_";
//    char INTCheck_string[64] = "INTCheck_";
//
//    for (int var = 0; var < detectedNodes.getNodesNum(); ++var) {
//        if (detectedNodes.getNodeId(var) != senderId) {
//            if (detectedNodes.getDeltaTime(detectedNodes.getNodeId(var),
//                    senderId) < 0.3) {
//                varNode = detectedNodes.get(detectedNodes.getNodeId(var));
//                INTScore = INTCheck(varNode.getSenderPos(0),
//                        senderNode.getSenderPos(0));
//                if (INTScore < 1) {
//
//                    sprintf(num_string, "%d", INTNum);
//                    strcat(INTId_string, num_string);
//                    strcat(INTCheck_string, num_string);
//                    result[INTId_string] = detectedNodes.getNodeId(var);
//                    result[INTCheck_string] = INTScore;
//
//                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));
//                    strncpy(INTCheck_string, "INTCheck_",
//                            sizeof(INTCheck_string));
//
//                    INTNum++;
//                }
//            }
//        }
//    }
//
//    result["INTNum"] = INTNum;

    return result;
}

void MDModuleV2::generateMDMHistory(std::map<std::string, double> result, int senderId) {

    MDMHistory history = MDMHistory()

    int INTindex = 0;
    char INTId_string[64] = "INTId_";

    AllTests++;
    bool incFlags = false;

    for (std::map<std::string, double>::iterator it = result.begin();
            it != result.end(); ++it) {

        if (it->first.compare(0, 6, "INTId_") != 0
                && it->first.compare(0, 9, "INTCheck_") != 0
                && it->first.compare(0, 6, "INTNum") != 0) {
            if (it->second < 1) {
                incFlags = true;
                std::cout << "##########V2 " << it->first << " => " << it->second
                        << " A:" << myId << " B:" << senderId << '\n';
            }
        } else {
            if (it->first.compare(0, 9, "INTCheck_") == 0) {
                if (it->second > 0) {
                    vector<string> fields;
                    split(fields, it->first, is_any_of("_"));

                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));

                    strcat(INTId_string, fields[1].data());
                    incFlags = true;
                    std::cout << "##########V2 " << "INTCheck " << " => "
                            << it->second << " A:" << myId << " B:" << senderId
                            << " C:" << result[INTId_string] << '\n';
                }
            }
        }
    }

}



static double flags = 0;
static double AllTests = 0;

void MDModuleV2::reportMB(std::map<std::string, double> result, int senderId) {

    int INTindex = 0;
    char INTId_string[64] = "INTId_";

    AllTests++;
    bool incFlags = false;

    for (std::map<std::string, double>::iterator it = result.begin();
            it != result.end(); ++it) {

        if (it->first.compare(0, 6, "INTId_") != 0
                && it->first.compare(0, 9, "INTCheck_") != 0
                && it->first.compare(0, 6, "INTNum") != 0) {
            if (it->second < 1) {
                incFlags = true;
                std::cout << "##########V2 " << it->first << " => " << it->second
                        << " A:" << myId << " B:" << senderId << '\n';
            }
        } else {
            if (it->first.compare(0, 9, "INTCheck_") == 0) {
                if (it->second > 0) {
                    vector<string> fields;
                    split(fields, it->first, is_any_of("_"));

                    strncpy(INTId_string, "INTId_", sizeof(INTId_string));

                    strcat(INTId_string, fields[1].data());
                    incFlags = true;
                    std::cout << "##########V2 " << "INTCheck " << " => "
                            << it->second << " A:" << myId << " B:" << senderId
                            << " C:" << result[INTId_string] << '\n';
                }
            }
        }
    }

    if (incFlags) {
        flags++;
    }

//    std::cout << "++++++++++ " << " Factor:" << flags / AllTests * 100 << "%"
//            << '\n';

}

