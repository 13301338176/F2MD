//
// Copyright (C) 2016 David Eckhoff <david.eckhoff@fau.de>
//
// Documentation for these modules is at http://veins.car2x.org/
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//

#include "BsmCheck.h"

BsmCheck::BsmCheck(int id) {
    nodeId = id;
    MDMNum = 0;
}

double BsmCheck::getART(int index) {
    return artList[index];
}

double BsmCheck::getMGTDistance(int index) {
    return mgtDistanceList[index];
}

double BsmCheck::getMGTSpeed(int index) {
    return mgtSpeedList[index];
}

double BsmCheck::getMAXSpeed(int index) {
    return maxSpeedList[index];
}

double BsmCheck::getINT(int index) {
    return intList[index];
}

double BsmCheck::getSAW(int index) {
    return sawList[index];
}

double BsmCheck::getMBF(int index) {
    return mbfList[index];
}

double BsmCheck::getMAP(int index) {
    return mapList[index];
}

void BsmCheck::addMDMNode(double art, double mgtDistance, double mgtSpeed,
        double maxSpeed, double inter, double saw, double mbf, double map) {
    if (MDMNum < MAXMDMLENGTH) {
        MDMNum++;
    }
    for (int var = MDMNum - 1; var > 0; --var) {
        artList[var] = artList[var - 1];
        mgtSpeedList[var] = mgtSpeedList[var - 1];
        mgtDistanceList[var] = mgtDistanceList[var - 1];
        maxSpeedList[var] = maxSpeedList[var - 1];
        intList[var] = intList[var - 1];
        sawList[var] = sawList[var - 1];
        mbfList[var] = mbfList[var - 1];
        mapList[var] = mapList[var - 1];
    }
    artList[0] = art;
    mgtSpeedList[0] = mgtSpeed;
    mgtDistanceList[0] = mgtDistance;
    maxSpeedList[0] = maxSpeed;
    intList[0] = inter;
    sawList[0] = saw;
    mbfList[0] = mbf;
    mapList[0] = map;

}
